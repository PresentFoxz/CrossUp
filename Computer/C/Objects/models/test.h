#ifndef TEST_H
#define TEST_H
#include "../mesh.h"

static const Mesh_t test1 = {
    .data = (Vect3m[]) {
        {-0.8f, -0.8f, -0.8f}, {-0.8f, -0.8f, 0.8f}, {-0.8f, 0.8f, 0.8f},
        {-0.8f, -0.8f, -0.8f}, {-0.8f, 0.8f, 0.8f}, {-0.8f, 0.8f, -0.8f},
        {0.8f, 0.8f, 0.8f}, {-0.8f, 0.8f, 0.8f}, {-0.8f, -0.8f, 0.8f},
        {0.8f, 0.8f, 0.8f}, {-0.8f, -0.8f, 0.8f}, {0.8f, -0.8f, 0.8f},
        {0.8f, -0.8f, 0.8f}, {-0.8f, -0.8f, 0.8f}, {-0.8f, -0.8f, -0.8f},
        {0.8f, -0.8f, 0.8f}, {-0.8f, -0.8f, -0.8f}, {0.8f, -0.8f, -0.8f},
        {0.8f, 0.8f, -0.8f}, {-0.8f, 0.8f, -0.8f}, {-0.8f, 0.8f, 0.8f},
        {0.8f, 0.8f, -0.8f}, {-0.8f, 0.8f, 0.8f}, {0.8f, 0.8f, 0.8f},
        {0.8f, -0.8f, -0.8f}, {-0.8f, -0.8f, -0.8f}, {-0.8f, 0.8f, -0.8f},
        {0.8f, -0.8f, -0.8f}, {-0.8f, 0.8f, -0.8f}, {0.8f, 0.8f, -0.8f},
        {0.8f, 0.8f, -0.8f}, {0.8f, 0.8f, 0.8f}, {0.8f, -0.8f, 0.8f},
        {0.8f, 0.8f, -0.8f}, {0.8f, -0.8f, 0.8f}, {0.8f, -0.8f, -0.8f}
    },
    .bfc = (int[]) {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    .color = (int[]) {3, 1, 1, 2, 2, 0, 2, 0, 3, 2, 3, 1},
    .count = (int) 12,
};

static const Mesh_t test3 = {
    .data = (Vect3m[]) {
        {3.24884f, 0.216656f, -0.286755f},{1.99524f, -0.208876f, 0.439049f}, {1.99524f, 0.0775986f, -0.488002f},
        {1.99524f, -0.208876f, 0.439049f}, {0.741637f, 0.216656f, -0.286755f}, {1.99524f, 0.0775986f, -0.488002f},
        {1.99524f, -0.208876f, 0.439049f}, {3.24884f, 0.216656f, -0.286755f}, {3.24884f, 0.016124f, 0.36218f},
        {0.741637f, 0.216656f, -0.286755f}, {1.99524f, -0.208876f, 0.439049f}, {0.741637f, 0.016124f, 0.36218f},
        {3.24884f, 0.216656f, -0.286755f}, {3.24884f, 0.541124f, 0.763246f}, {3.24884f, 0.016124f, 0.36218f},
        {3.24884f, 0.865592f, -0.286755f}, {3.24884f, 0.541124f, 0.763246f}, {3.24884f, 0.216656f, -0.286755f},
        {3.24884f, 0.541124f, 0.763246f}, {3.24884f, 0.865592f, -0.286755f}, {3.24884f, 1.06612f, 0.36218f},
        {3.24884f, 1.06612f, 0.36218f}, {1.99524f, 0.541124f, 1.012f}, {3.24884f, 0.541124f, 0.763246f},
        {1.99524f, 0.541124f, 1.012f}, {3.24884f, 1.06612f, 0.36218f}, {1.99524f, 1.29112f, 0.439049f},
        {0.741637f, 1.06612f, 0.36218f}, {1.99524f, 0.541124f, 1.012f}, {1.99524f, 1.29112f, 0.439049f},
        {1.99524f, 0.541124f, 1.012f}, {0.741637f, 1.06612f, 0.36218f}, {0.741637f, 0.541124f, 0.763246f},
        {3.24884f, 0.016124f, 0.36218f}, {1.99524f, 0.541124f, 1.012f}, {1.99524f, -0.208876f, 0.439049f},
        {1.99524f, 0.541124f, 1.012f}, {0.741637f, 0.016124f, 0.36218f}, {1.99524f, -0.208876f, 0.439049f},
        {1.99524f, 0.541124f, 1.012f}, {3.24884f, 0.016124f, 0.36218f}, {3.24884f, 0.541124f, 0.763246f},
        {0.741637f, 0.016124f, 0.36218f}, {1.99524f, 0.541124f, 1.012f}, {0.741637f, 0.541124f, 0.763246f},
        {3.24884f, 0.865592f, -0.286755f}, {1.99524f, 1.29112f, 0.439049f}, {3.24884f, 1.06612f, 0.36218f},
        {1.99524f, 1.29112f, 0.439049f}, {0.741637f, 0.865592f, -0.286755f}, {0.741637f, 1.06612f, 0.36218f},
        {1.99524f, 1.29112f, 0.439049f}, {3.24884f, 0.865592f, -0.286755f}, {1.99524f, 1.00465f, -0.488002f},
        {0.741637f, 0.865592f, -0.286755f}, {1.99524f, 1.29112f, 0.439049f}, {1.99524f, 1.00465f, -0.488002f},
        {0.741637f, 0.216656f, -0.286755f}, {0.741637f, 0.541124f, 0.763246f}, {0.741637f, 0.865592f, -0.286755f},
        {0.741637f, 0.541124f, 0.763246f}, {0.741637f, 1.06612f, 0.36218f}, {0.741637f, 0.865592f, -0.286755f},
        {0.741637f, 0.541124f, 0.763246f}, {0.741637f, 0.216656f, -0.286755f}, {0.741637f, 0.016124f, 0.36218f},
        {3.24884f, 0.216656f, -0.286755f}, {1.99524f, 1.00465f, -0.488002f}, {3.24884f, 0.865592f, -0.286755f},
        {1.99524f, 0.0775986f, -0.488002f}, {0.741637f, 0.865592f, -0.286755f}, {1.99524f, 1.00465f, -0.488002f},
        {1.99524f, 1.00465f, -0.488002f}, {3.24884f, 0.216656f, -0.286755f}, {1.99524f, 0.0775986f, -0.488002f},
        {0.741637f, 0.865592f, -0.286755f}, {1.99524f, 0.0775986f, -0.488002f}, {0.741637f, 0.216656f, -0.286755f}
    },
    .bfc = (int[]) {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    .color = (int[]) {3, 3, 1, 0, 3, 2, 2, 2, 1, 2, 2, 2, 3, 2, 2, 2, 2, 2, 3, 1, 1, 3, 2, 2, 0, 3},
    .count = (int) 26,
};

static const Mesh_t test2 = {
    .data = (Vect3m[]) {
        {-1.5f, 0.8f, 0.0f}, {0.0f, 2.0f, 0.0f}, {1.5f, 0.8f, 0.0f}
    },
    .bfc = (int[]) {0},
    .color = (int[]) {3},
    .count = (int) 1,
};

static const AnimMesh idleTri = {
    .meshModel = (const Mesh_t*[]) { &test2 },
    .animOrientation = (VectB[]) {
        {{0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, 6, 0},
        {{0.0f, 0.0f, 0.0f}, {20.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, 6, 0}
    },
    .count = 2,
};

static const AnimMesh idleCube = {
    .meshModel = (const Mesh_t*[]) { &test1 },
    .animOrientation = (VectB[]) {
        {{0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, 0, 0}
    },
    .count = 1,
};

static const AnimMesh moveTri = {
    .meshModel = (const Mesh_t*[]) { &test2, &test3 },
    .animOrientation = (VectB[]) {
        {{0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, 0, 0},
        {{0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, 10, 1}
    },
    .count = 2,
};

static const AnimMesh moveCube = {
    .meshModel = (const Mesh_t*[]) { &test1 },
    .animOrientation = (VectB[]) {
        {{0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, 0, 0},
        {{0.0f, -0.5f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, -0.5f, 0.0f}, 4, 0},
        {{0.0f, 1.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.5f, 0.0f}, 8, 0},
        {{0.0f, 1.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, 0.0f, 0.0f}, 12, 0},
        {{0.0f, -0.5f, 0.0f}, {0.0f, 0.0f, 0.0f}, {0.0f, -0.5f, 0.0f}, 16, 0}
    },
    .count = 5,
};

static const ModelAnimations triAnims = {
    .animations = (const AnimMesh*[]) { &idleTri, &moveTri }
};

static const ModelAnimations cubeAnim = {
    .animations = (const AnimMesh*[]) { &idleCube, &moveCube }
};

static const int modelCount = (test1.count + test2.count + test3.count);

static const PlayerModel_t testox = {
    .animations = (const ModelAnimations*[]) { &cubeAnim, &triAnims },
    .maxFrames = (const int[]) { 12, 20 },
    .joints = 2,
    .count = modelCount,
};

#endif
